module Subprocess;

// This type represents the exit status of a subprocess.
// 
// This type is the union of following variants:
// * `exit : U8` - Means that the subprocess successfully exited (i.e., the main function returned or `exit()` was called) and stores the exit status code.
// * `signaled : U8` - Means that the subprocess was terminated by a signal and stores the signal number which caused the termination.
// * `wait_failed : ()` - Means that the `run*` function failed to wait the subprocess to exit.
type ExitStatus = box union { 
    exit : U8,
    signaled : U8,
    wait_failed : ()
};

// `run_string(com, args, input)` executes a command specified by `com` with arguments `args`, and writes `input` to the standard input of the running command.
// 
// The result is the pair of standard output and standard error, and an `ExitStatus` value.
run_string : String -> Array String -> String -> IOFail ((String, String), ExitStatus);
run_string = |com, args, input| (
    run_with_stream(com, args, |(stdin, stdout, stderr)| (
        eval *write_string(stdin, input);
        eval *close_file(stdin).lift; // Send EOF.
        pure $ (*read_string(stdout), *read_string(stderr))
    ))
);

// Result of `fixsubprocess_wait_subprocess`.
// 
// This struct is used in the internal implementation.
type WaitResult = box struct { is_timeout : U8, wait_failed : U8, exit_status : U8, exit_status_available : U8, stop_signal : U8, stop_signal_available : U8 };

// `run_with_stream(com, args, worker)` executes a command specified by `com` with arguments `args`. 
// 
// The function `worker` receives three `IOHandle`s which are piped to the stdin, stdout and stderr of the running command.
// 
// The result is the value returned by `worker` paired with an `ExitStatus` value.
// * `com : String` - The path to the program to run.
// * `args: Array String` - The arguments to be passed to `com`.
// * `worker : (IOHandle, IOHandle, IOHandle) -> IOFail a` - Receives three `IOHandle`s which are piped to stdin, stdout and stderr of the running command.
run_with_stream : String -> Array String -> ((IOHandle, IOHandle, IOHandle) -> IOFail a) -> IOFail (a, ExitStatus);
run_with_stream = |com, args, worker| (
    IOFail::from_io_result $ args.borrow_boxed_io(|_|
        let arg_ptrs = args.map(_get_c_str).push_back(nullptr);
        arg_ptrs.borrow_boxed_io(|args| com.@_data.borrow_boxed_io(|com|
            // Execute command.
            let out_error : Array Ptr = Array::empty(1)._unsafe_set_size(1);
            let out_files : Array Ptr = Array::empty(3)._unsafe_set_size(3);
            let out_pid : Array I64 = Array::empty(1)._unsafe_set_size(1);
            let (out_error, (out_files, (out_pid, _))) = *out_error.mutate_boxed_io(|out_err_ptr|
                out_files.mutate_boxed_io(|out_files_ptr|
                    out_pid.mutate_boxed_io(|out_pid_ptr|
                        IO::from_runner $ |ios| FFI_CALL_IOS[() fixsubprocess_fork_execvp(Ptr, Ptr, Ptr, Ptr, Ptr), com, args, out_err_ptr, out_files_ptr, out_pid_ptr, ios]
                    )
                )
            );
            if out_error.@(0) != nullptr {
                // Some error occurred.
                let msg_ptr = out_error.@(0);
                let err_msg = String::_unsafe_from_c_str_ptr(msg_ptr);
                IO::from_runner(|io| FFI_CALL_IOS[() free(Ptr), msg_ptr, io]);;
                pure $ Result::err $ err_msg
            };
            let handles = (
                IOHandle::from_file_ptr(out_files.@(0)),
                IOHandle::from_file_ptr(out_files.@(1)),
                IOHandle::from_file_ptr(out_files.@(2))
            );
            let pid = out_pid.@(0);
            let worker_res = *worker(handles).to_result;
            handles.@0.close_file;;
            handles.@1.close_file;;
            handles.@2.close_file;;

            // Error handling.
            if worker_res.is_err {
                pure $ Result::err $ worker_res.as_err
            };
            let worker_res = worker_res.as_ok;

            // Wait for subprocess.
            let out = WaitResult { is_timeout: 0_U8, wait_failed: 0_U8, exit_status: 0_U8, exit_status_available: 0_U8, stop_signal: 0_U8, stop_signal_available: 0_U8 };
            let (out, _) = *out.mutate_boxed_io(|out_ptr|
                IO::from_runner $ |ios| FFI_CALL_IOS[
                    () fixsubprocess_wait_subprocess(I64, F64, Ptr), 
                    pid, -1.0, // No timeout 
                    out_ptr, ios
                ]
            );

            let exit_status = if out.@wait_failed == 1_U8 { 
                ExitStatus::wait_failed()
            } else if out.@exit_status_available == 1_U8 {
                ExitStatus::exit(out.@exit_status)
            } else if out.@stop_signal_available == 1_U8 {
                ExitStatus::signaled(out.@stop_signal)
            } else {
                ExitStatus::wait_failed()
            };
            pure $ Result::ok $ (worker_res, exit_status)
        ))
    )
);